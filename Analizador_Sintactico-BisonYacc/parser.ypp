%require "3.2"
%language "C++"
%define api.value.type variant
%define api.token.constructor
%define parse.assert

%code requires
{
    #pragma once
    #include <iostream>
    #include <string>
    #include <cmath>
    
    namespace yy
    {
        class parser;
    }
}

%code
{    
    namespace yy
    {
        parser::symbol_type yylex(); 
    }

    extern yy::parser::symbol_type obtener_siguiente_token();
}

%token ID NUMERO OPE_COMP OPE_ASIGN FINAL_SENT TIPO KEYWORD 
%token OBJ_COUT OBJ_CIN OPE_SALIDA OPE_ENTRADA SUM REST MULT DIV
%token LLAVE_IZQ LLAVE_DER PAREN_IZQ PAREN_DER SEPARADOR
%token POW_CMATH SQRT_CMATH SIN_CMATH COS_CMATH LOG_CMATH LOG10_CMATH LOG2_CMATH

%type <std::string> ID
%type <double> NUMERO
%type <double> expresion

%left REST SUM 
%left MULT DIV
%precedence NEG

%%

Programa:
|Programa function
|Programa definicion_Var
|Programa inicializacion_Var
|Programa defn_e_Iniclzn_Var
|Programa ingr_Valor_Var
|Programa impr_Valor_Var
|Programa fin_Programa
|Programa llave_DER 
|error
;

definicion_Var:        TIPO ID FINAL_SENT{ 
                            std::cout << "Todo correcto! " << "\n";
                        }
;

inicializacion_Var:     ID OPE_ASIGN expresion FINAL_SENT { 
                            std::cout << "Todo correcto!\t" << $1 << " = " << $3 << "\n"; 
                        }
                            
;

defn_e_Iniclzn_Var:   TIPO ID OPE_ASIGN expresion FINAL_SENT{ 
                            std::cout << "Todo correcto!\t" << $2 << " = " << $4 << "\n";
                        }
;

expresion:              NUMERO                          { $$ = $1;      } |    
                        expresion SUM expresion         { $$ = $1 + $3; } |
                        expresion REST expresion        { $$ = $1 - $3; } |
                        expresion MULT expresion        { $$ = $1 * $3; } |
                        expresion DIV expresion         { $$ = $1 / $3; } |
                        REST expresion %prec NEG        { $$ = - $2;    } |
                        POW_CMATH PAREN_IZQ expresion SEPARADOR expresion PAREN_DER{
                                                          $$ = pow ($3,$5);
                                                                        } |
                        SQRT_CMATH PAREN_IZQ expresion PAREN_DER{
                                                          $$ = sqrt ($3);
                                                                        } |
                        SIN_CMATH PAREN_IZQ expresion PAREN_DER{
                                                          $$ = sin ($3);
                                                                        } |
                        COS_CMATH PAREN_IZQ expresion PAREN_DER{
                                                          $$ = cos ($3);
                                                                        } |
                        LOG_CMATH PAREN_IZQ expresion PAREN_DER{
                                                          $$ = log ($3);
                                                                        } |
                        LOG10_CMATH PAREN_IZQ expresion PAREN_DER{
                                                          $$ = log10 ($3);
                                                                        } |
                        LOG2_CMATH PAREN_IZQ expresion PAREN_DER{
                                                          $$ = log2 ($3);
                                                                        } |
                        PAREN_IZQ expresion PAREN_DER   { $$ = $2; } 
;

ingr_Valor_Var:         OBJ_CIN OPE_ENTRADA ID FINAL_SENT{ 
                            std::cout << "Todo correcto! " << "\n";
                        }
;

impr_Valor_Var:         OBJ_COUT OPE_SALIDA ID FINAL_SENT{ 
                            std::cout << "Todo correcto! " << "\n";
                        }
;

fin_Programa:           KEYWORD NUMERO FINAL_SENT{
                            std::cout << "Todo correcto! " << "\n";
                        }
;

function:               TIPO ID PAREN_IZQ PAREN_DER LLAVE_IZQ {std::cout << "Todo correcto! " << "\n";}
;

llave_DER:              LLAVE_DER {std::cout << "Todo correcto! " << "\n";};

%%
namespace yy
{
    void parser::error(const std::string& msg) 
    {
        std::cout<< "Error de Sintaxis!\n";
    }
}